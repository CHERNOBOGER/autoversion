name: Version Update

on:
  pull_request:
    types: 
      - closed
    branches:
      - release
env:
  NAME_VERSION_FILE: ${{ github.workspace }}/version
  RELEASE_BRACH: release
  MINOR: minor
  PATCH: patch
  VERSION_UP: version-update.py
  REPO_NAME: ${{ github.event.repository.name }}
 
jobs:
  pre-merge-check:
    runs-on: ubuntu-latest
    steps:
      
      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8
      
      - name: Print info
        id: print-info
        run: |
          echo "EVENT NAME    : ${{ github.event_name }}"
          echo "ACTION        : ${{ github.event.action }}"
          echo "EVENT NAME    : ${{ github.event_name }}"
          echo "IS            : ${{ github.event.pull_request.merged }}"
          echo "CURRENT BRANCH: ${{ steps.branch-names.outputs.current_branch }}"
          echo "REF           : ${{ github.ref }}"
          echo "REF NAME      : ${{ github.ref_name }}"
          echo "DEFAULT BRANCH: ${{ steps.branch-names.outputs.default_branch }}"
          echo "WOKSPACE      : ${{ github.workspace }} "
      
        
  # start update version files       
  update-version:
    # IMPORTANT!
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      tag: ${{steps.get-commit-txt.outputs.TAG_MSG}}
    needs: pre-merge-check
    steps:      

      # use special lib for parse branch names 
      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

      # checkout on branch 
      - name: Ð¡heckout on [${{env.RELEASE_BRACH}}]
        uses: actions/checkout@v2
      
      # promt path to version file 
      - name: Promt catalog's info
        run : |
          echo "path to version file ${{ env.NAME_VERSION_FILE }}"
          
      # Setup python env 
      - name: Install and Setup python 
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"
    
      # update version if branch start with feature
      - name: Update version [minor]
        if: startsWith(steps.branch-names.outputs.current_branch,'feature')
        run: 
          python ${{env.VERSION_UP}} ${{ env.NAME_VERSION_FILE }} ${{ env.MINOR }}
 
      # update version if bracnh start with feature
      - name: Update version [patch]
        if: startsWith(steps.branch-names.outputs.current_branch,'hotfix')
        run:
          python ${{env.VERSION_UP}} ${{ env.NAME_VERSION_FILE }} ${{ env.PATCH }}
      
      # generate variables for commit and tag 
      - name: Save Version and Log to env
        id: get-commit-txt
        run: | 
          COMMIT_MSG=$(python ${{env.VERSION_UP}} ${{ env.NAME_VERSION_FILE }} version_log -1)
          TAG_MSG=$(python ${{env.VERSION_UP}} ${{ env.NAME_VERSION_FILE }} version)
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
          echo "TAG_MSG=${TAG_MSG}" >> $GITHUB_ENV
          echo "TAG_MSG=${TAG_MSG}" >> $GITHUB_OUTPUT
      
      # setup user which will be commit
      # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      # add and push to remote repository 
      - name: Update [version] and put [tag]
        run: |
          git add .
          git commit -m "${{ env.COMMIT_MSG }}"
          git tag -a v${{ env.TAG_MSG }} -m "update tag"
          git push -u origin ${{ env.RELEASE_BRACH }} --tags 
